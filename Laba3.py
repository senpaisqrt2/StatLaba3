import numpy as np
import scipy.stats as stats
import pandas as pd
import matplotlib.pyplot as plt

# Шаг 1: Загрузка данных из файла "Статистика"
# Открываем файл, где содержатся возраста преступников.
# Каждый возраст повторяется столько раз, сколько преступлений совершили люди этого возраста.
with open('C:\\Users\\senpai_sqrt2\\Desktop\\Uni\\3rd course\\Stat\\Laba3\\Статистика.txt', 'r') as file:
    # Читаем файл построчно, удаляем лишние пробелы (strip) и преобразуем строки в числа (int)
    ages = [int(line.strip()) for line in file.readlines()]

# Преобразуем список возрастов в DataFrame для удобства анализа
# DataFrame — это таблица данных, с которой можно легко работать
ages_df = pd.DataFrame(ages, columns=["Age"])

# Выводим несколько статистик по данным для общей информации
print("Всего данных (преступников):", len(ages_df))  # Сколько всего записей в наборе данных
print("Минимальный возраст:", ages_df["Age"].min())  # Минимальный возраст преступника
print("Максимальный возраст:", ages_df["Age"].max())  # Максимальный возраст преступника
print("Средний возраст:", ages_df["Age"].mean())  # Средний возраст (математическое ожидание)
print("Стандартное отклонение возраста:", ages_df["Age"].std())  # Стандартное отклонение

# Шаг 2: Проверка гипотезы о нормальном распределении возраста
# Разбиваем возраст на 7 равных интервалов (групп)
# Это необходимо для того, чтобы вычислить частоты возрастов в каждом интервале
intervals = pd.cut(ages_df["Age"], bins=7, include_lowest=True)

# Считаем наблюдаемые частоты (сколько преступников попадает в каждый из интервалов)
# 'value_counts()' возвращает количество элементов, попадающих в каждый интервал
observed_frequencies = intervals.value_counts().sort_index()

# Выводим наблюдаемые частоты для наглядности
print("Наблюдаемые частоты по интервалам:")
print(observed_frequencies)

# Шаг 3: Расчет среднего возраста и стандартного отклонения
# Средний возраст и стандартное отклонение нужны для расчета ожидаемых частот нормального распределения
mean_age = ages_df["Age"].mean()  # Средний возраст
std_age = ages_df["Age"].std()    # Стандартное отклонение

# Шаг 4: Расчет ожидаемых частот для нормального распределения
# Мы используем кумулятивную функцию распределения (CDF) нормального закона для расчета
# вероятности того, что данные попадут в каждый интервал
expected_frequencies = [stats.norm.cdf((max_interval.right - mean_age) / std_age) -
                        stats.norm.cdf((max_interval.left - mean_age) / std_age)
                        for max_interval in observed_frequencies.index]

# Преобразуем вероятности в абсолютные значения, умножив на общее количество преступников
expected_frequencies = np.array(expected_frequencies) * len(ages_df)

# Нормализуем ожидаемые частоты так, чтобы их сумма совпадала с суммой наблюдаемых частот
# Это важно, потому что критерий Пирсона требует, чтобы сумма наблюдаемых и ожидаемых частот была равна
expected_frequencies = expected_frequencies * (observed_frequencies.sum() / expected_frequencies.sum())

# Выводим ожидаемые частоты для сравнения с наблюдаемыми
print("Ожидаемые частоты по нормальному распределению:")
print(expected_frequencies)

# Шаг 5: Применение критерия Пирсона для проверки гипотезы о нормальном распределении
# Критерий Пирсона проверяет, насколько наблюдаемые частоты отличаются от ожидаемых.
# Если различия значительны, гипотеза о нормальном распределении отклоняется.

# 'stats.chisquare' возвращает статистику χ² и p-value
chi2_stat, p_value = stats.chisquare(f_obs=observed_frequencies, f_exp=expected_frequencies)

# Выводим результаты критерия Пирсона
print("Критерий Пирсона для нормального распределения:")
print(f"Chi2 статистика: {chi2_stat}")  # Значение χ² показывает, насколько наблюдаемые данные отличаются от ожидаемых
print(f"p-value: {p_value}")  # p-value — вероятность того, что различия между наблюдаемыми и ожидаемыми частотами случайны

# Шаг 6: Принятие или отклонение гипотезы
# Мы используем стандартный уровень значимости α = 0.05 (5%). Если p-value меньше 0.05, то гипотеза отклоняется.
alpha = 0.05  # Уровень значимости

if p_value < alpha:
    print("Нулевая гипотеза о нормальном распределении отклоняется.")  # Если p-value меньше 0.05, гипотеза отклоняется
else:
    print("Нет оснований отклонять нулевую гипотезу о нормальном распределении.")  # Если p-value больше 0.05, гипотеза принимается

# Шаг 7: Проверка гипотезы о равенстве дисперсий (критерий Фишера)
# Генерируем две случайные выборки по 500 элементов для проверки гипотезы
sample1 = np.random.choice(ages, size=500, replace=False)
sample2 = np.random.choice(ages, size=500, replace=False)

# Вычисляем дисперсии для каждой выборки
# Дисперсия измеряет, насколько сильно разбросаны значения вокруг среднего
var1 = np.var(sample1, ddof=1)  # Дисперсия первой выборки
var2 = np.var(sample2, ddof=1)  # Дисперсия второй выборки

# Применяем критерий Фишера для проверки гипотезы о равенстве дисперсий
# Критерий Фишера сравнивает две дисперсии и позволяет определить, отличаются ли они значимо
# Нулевая гипотеза: дисперсии равны, альтернативная гипотеза: дисперсии различны
f_stat = var1 / var2 if var1 > var2 else var2 / var1  # Рассчитываем F-статистику (отношение дисперсий)
df1 = len(sample1) - 1  # Степени свободы для первой выборки (размер выборки минус 1)
df2 = len(sample2) - 1  # Степени свободы для второй выборки
p_value_f = 1 - stats.f.cdf(f_stat, df1, df2)  # Вычисляем p-value для F-критерия

# Выводим результаты критерия Фишера
print("Критерий Фишера для проверки равенства дисперсий:")
print(f"F-статистика: {f_stat}")  # F-статистика показывает отношение двух дисперсий
print(f"p-value: {p_value_f}")  # p-value — вероятность того, что различия между дисперсиями случайны

# Шаг 8: Принятие или отклонение гипотезы о равенстве дисперсий
# Если p-value меньше 0.05, гипотеза о равенстве дисперсий отклоняется
if p_value_f < alpha:
    print("Нулевая гипотеза о равенстве дисперсий отклоняется.")  # Если p-value меньше 0.05, гипотеза отклоняется
else:
    print("Нет оснований отклонять нулевую гипотезу о равенстве дисперсий.")  # Если p-value больше 0.05, гипотеза принимается

# Дополнительные выводы для наглядности:
# Выводим средний возраст, стандартное отклонение, а также суммы частот для проверки
print("Среднее значение возраста:", mean_age)  # Средний возраст
print("Стандартное отклонение возраста:", std_age)  # Стандартное отклонение
print("Сумма наблюдаемых частот:", observed_frequencies.sum())  # Сумма наблюдаемых частот (должна совпадать с числом данных)
print("Сумма ожидаемых частот:", expected_frequencies.sum())  # Сумма ожидаемых частот (нормализована)
print("Проверка равенства сумм наблюдаемых и ожидаемых частот:", np.isclose(observed_frequencies.sum(), expected_frequencies.sum()))
